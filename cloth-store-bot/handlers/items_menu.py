from aiogram.types import MediaGroup
from aiogram.types import CallbackQuery
from aiogram.utils.emoji import emojize

from another.request_to_API import get_items_categories, get_items_list
from keyboards.callback_data_bot import callback_for_next_or_prev_button, callback_for_category, \
    callback_back_to_categories, callback_for_headpage_inline_keyboard
from keyboards.inline_keyboard import category_item_formation_keyboard, items_list_formation_keyboard, \
    item_detail_formation_inline, pagination_between_items_formation_inline
from settings.config import DP, BOT, MESSAGES_ID_FOR_ITEMS_IN_USERS_BASKET


async def choose_goods(call: CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞."""

    await call.answer(f'{emojize(":robot:")} –†–∞–±–æ—Ç–∞—é —Å —Å–µ—Ä–≤–µ—Ä–æ–º...')
    response = await get_items_categories()
    inline_keyboard_with_categories = category_item_formation_keyboard(response_data=response,
                                                                       message_id=call.message.message_id)

    user_messages_in_dict = MESSAGES_ID_FOR_ITEMS_IN_USERS_BASKET.get(call.message.chat.id)
    if isinstance(user_messages_in_dict, dict):
        for i_key, i_value in user_messages_in_dict.items():
            if i_key == 'pagination_message':
                await call.message.edit_text(
                    text=f'üîª–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å',
                    reply_markup=inline_keyboard_with_categories)
                continue
            for j_elem in i_value:
                await BOT.delete_message(chat_id=call.message.chat.id, message_id=j_elem)
        MESSAGES_ID_FOR_ITEMS_IN_USERS_BASKET.pop(call.from_user.id)

    else:
        await call.message.edit_text(
            text=f'{emojize(":backhand_index_pointing_down_medium_skin_tone:")} –í—ã–±–µ—Ä–∏—Ç–µ '
                 f'–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞',
            reply_markup=inline_keyboard_with_categories)


async def detail_goods_list_by_category(call: CallbackQuery, callback_data: dict):
    '''–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.'''

    await call.message.delete()  # –£–¥–∞–ª—è–µ–º —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.answer(text=f'{emojize(":robot:")} –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —É —Å–µ—Ä–≤–µ—Ä–∞...')
    response = await get_items_list(items_category_id=callback_data['category_id'])
    result_data = response.get('results')

    # –ò–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    MESSAGES_ID_FOR_ITEMS_IN_USERS_BASKET[call.message.chat.id] = dict()

    for i_item in result_data:
        if i_item['number_of_items'] < 1:  # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ, —Ç–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º.
            continue
        items_id = i_item.get('id')
        items_name = i_item.get('items_name')
        description = i_item.get('description')
        price = i_item.get('price')
        clothes_size = i_item.get('clothes_size')
        image_for_items_id = i_item.get('image_for_items_id').split()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ, –∫–∞–∫ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É
        album = MediaGroup()
        for i_image_id in image_for_items_id:
            album.attach_photo(i_image_id)
        photo_message = await BOT.send_media_group(
            chat_id=call.message.chat.id,
            media=album
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        inline_keyboard = item_detail_formation_inline(
            category_id=callback_data['category_id'],
            item_id=items_id,
        )
        item_message = await BOT.send_message(
            chat_id=call.message.chat.id,
            text=f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {items_name}\n'
                 f'–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {description}\n'
                 f'–¶–µ–Ω–∞: {round(price, 2)} —Ä—É–±.\n'
                 f'–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {clothes_size}\n\n',
            reply_markup=inline_keyboard
        )

        # –ê–±–∑–∞—Ü –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è id —Å–æ–æ–±—â–µ–Ω–∏–π –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ª–æ–≤–∞—Ä—å —Ö—Ä–∞–Ω–µ–Ω–∏—è
        MESSAGES_ID_FOR_ITEMS_IN_USERS_BASKET[call.message.chat.id][f'item_{items_id}'] = [item_message.message_id]
        for i_photo_msg in photo_message:
            MESSAGES_ID_FOR_ITEMS_IN_USERS_BASKET[call.message.chat.id][f'item_{items_id}'].append(
                i_photo_msg.message_id)

    # –ü—Ä–∏—Å—ã–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    pagination_inline_keyboard = pagination_between_items_formation_inline(response_data=response)
    pagination_message = await call.message.answer(
        text=f'{emojize("‚óÄ")} –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ {emojize("‚ñ∂")}',
        reply_markup=pagination_inline_keyboard
        )
    MESSAGES_ID_FOR_ITEMS_IN_USERS_BASKET[call.message.chat.id]['pagination_message'] = pagination_message.message_id


''' –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ù–ê–í–ò–ì–ê–¶–ò–ò '''


async def pagination_step_for_items_categories(call: CallbackQuery, callback_data: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤."""

    await call.answer(text=f'{emojize(":robot:")} –ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π...')
    pagination_step = callback_data.get('pagination_step')
    response = await get_items_categories(pagination_part_of_link=pagination_step)
    inline_keyboard = category_item_formation_keyboard(response_data=response, message_id=call.message.message_id)
    await call.message.edit_text(text=f'{emojize(":robot:")}–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤.', reply_markup=inline_keyboard)


async def pagination_step_for_items_list(call: CallbackQuery, callback_data: dict):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤.'''

    await call.answer(text=f'{emojize(":robot:")} –ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤...')
    pagination_step = callback_data['pagination_step']
    response = await get_items_list(pagination_part_of_link=pagination_step)

    result_data = response.get('results')

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    user_messages_in_dict = MESSAGES_ID_FOR_ITEMS_IN_USERS_BASKET.get(call.from_user.id)
    for i_key, i_value in user_messages_in_dict.items():
        if i_key == 'pagination_message':
            await BOT.delete_message(chat_id=call.message.chat.id, message_id=i_value)
            continue
        for j_elem in i_value:
            await BOT.delete_message(chat_id=call.message.chat.id, message_id=j_elem)
    MESSAGES_ID_FOR_ITEMS_IN_USERS_BASKET.pop(call.from_user.id)

    MESSAGES_ID_FOR_ITEMS_IN_USERS_BASKET[call.message.chat.id] = dict()

    for i_item in result_data:
        if i_item['number_of_items'] < 1:  # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ, —Ç–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º.
            continue
        items_id = i_item.get('id')
        items_name = i_item.get('items_name')
        description = i_item.get('description')
        price = i_item.get('price')
        clothes_size = i_item.get('clothes_size')
        image_for_items_id = i_item.get('image_for_items_id').split()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ, –∫–∞–∫ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É
        album = MediaGroup()
        for i_image_id in image_for_items_id:
            album.attach_photo(i_image_id)
        photo_message = await BOT.send_media_group(
            chat_id=call.message.chat.id,
            media=album
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        inline_keyboard = item_detail_formation_inline(
            category_id=i_item.get('items_category'),
            item_id=items_id,
        )
        item_message = await BOT.send_message(
            chat_id=call.message.chat.id,
            text=f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {items_name}\n'
                 f'–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {description}\n'
                 f'–¶–µ–Ω–∞: {round(price, 2)} —Ä—É–±.\n'
                 f'–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {clothes_size}\n\n',
            reply_markup=inline_keyboard
        )

        # –ê–±–∑–∞—Ü –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è id —Å–æ–æ–±—â–µ–Ω–∏–π –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ª–æ–≤–∞—Ä—å —Ö—Ä–∞–Ω–µ–Ω–∏—è
        MESSAGES_ID_FOR_ITEMS_IN_USERS_BASKET[call.message.chat.id][f'item_{items_id}'] = [item_message.message_id]
        for i_photo_msg in photo_message:
            MESSAGES_ID_FOR_ITEMS_IN_USERS_BASKET[call.message.chat.id][f'item_{items_id}'].append(
                i_photo_msg.message_id)

    # –ü—Ä–∏—Å—ã–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    pagination_inline_keyboard = pagination_between_items_formation_inline(response_data=response)
    pagination_message = await call.message.answer(
        text=f'{emojize("‚óÄ")} –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ {emojize("‚ñ∂")}',
        reply_markup=pagination_inline_keyboard
    )
    MESSAGES_ID_FOR_ITEMS_IN_USERS_BASKET[call.message.chat.id]['pagination_message'] = pagination_message.message_id


''' –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í '''


def register_items_menu_handlers():
    # –Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
    DP.register_callback_query_handler(choose_goods, callback_for_headpage_inline_keyboard.filter(flag='choose_goods'))
    DP.register_callback_query_handler(detail_goods_list_by_category,
                                       callback_for_category.filter(flag='category_for_items'))
    DP.register_callback_query_handler(pagination_step_for_items_categories,
                                       callback_for_next_or_prev_button.filter(flag='pagination_categories'))
    DP.register_callback_query_handler(choose_goods,
                                       callback_back_to_categories.filter(flag='back_to_categories'))
    DP.register_callback_query_handler(pagination_step_for_items_list,
                                       callback_for_next_or_prev_button.filter(flag='pagination_items'))
