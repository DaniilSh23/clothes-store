from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, ParseMode
from aiogram.utils.emoji import emojize

from another.request_to_API import get_info_about_orders, req_for_remove_order, get_user_basket, post_req_for_add_order, \
    clear_basket, post_req_for_add_new_user
from keyboards.callback_data_bot import callback_for_orders_lst, callback_for_accept_order, \
    callback_for_headpage_inline_keyboard
from keyboards.common_keyboards import STAFF_REACTION, INLINE_KEYBOARD_BUTTON_HEADPAGE
from keyboards.inline_keyboard import order_formation_inline, stuff_formation_order_complete_inline
from settings.config import DP, BOT, STAFF_ID, MESSAGES_ID_FOR_ITEMS_IN_USERS_BASKET, KEYBOARD


async def my_order(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ú–û–ô –ó–ê–ö–ê–ó."""

    await call.message.edit_text(text=f'üóí–ó–∞–∫–∞–∑—ã\n\n'
                                      f'–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è, –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª "üõí–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"',
                                 reply_markup=INLINE_KEYBOARD_BUTTON_HEADPAGE)
    user_tlg_id = call.from_user.id
    response = await get_info_about_orders(user_tlg_id)
    if response == 400:
        await call.answer(text=f'{emojize(":robot:")} –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É...\n'
                               f'–ú—ã —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –∏ —Å–∫–æ—Ä–æ –≤—Å—ë –ø–æ—á–∏–Ω–∏–º.',
                          show_alert=True)
    else:
        MESSAGES_ID_FOR_ITEMS_IN_USERS_BASKET[call.from_user.id] = []
        for i_order in response:
            order_id = i_order.get('id')
            if i_order.get('pay_status'):
                pay_status = '–û–ø–ª–∞—á–µ–Ω'
            else:
                pay_status = '–ù–ï –æ–ø–ª–∞—á–µ–Ω'
            if i_order.get('execution_status'):
                execution_status = '–ì–æ—Ç–æ–≤'
            else:
                execution_status = '–ù–ï –≥–æ—Ç–æ–≤'
            order_items = i_order.get('order_items').split('\n')
            result_orders_price = i_order.get('result_orders_price')
            text_for_message = f'<b><ins>{emojize(":receipt:")}–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <tg-spoiler>{order_id}</tg-spoiler></ins></b>\n\n' \
                               f'<b>C–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b> \n'
            other_text = f'<b>\n{emojize(":money_with_wings:")}–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞–∫–∞–∑–∞:</b> <tg-spoiler>{result_orders_price}</tg-spoiler> —Ä—É–±.\n\n' \
                         f'<b>C—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:</b> {pay_status}\n' \
                         f'<b>–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {execution_status}\n\n' \
                         f'<b>{emojize(":mobile_phone:")}–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {i_order.get("contact_telephone")}\n' \
                         f'<b>{emojize(":cityscape_at_dusk:")}–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {i_order.get("delivery_address")}' \
                         f'<b>{emojize(":coat:")}–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã:</b> {i_order.get("sizes_for_clothes")}'

            for i_item in order_items:
                text_for_message = ''.join([text_for_message, i_item, '\n'])
            text_for_message = ''.join([text_for_message, other_text])
            i_message = await call.message.answer(text=text_for_message)
            chat_id = i_message.chat.id
            message_id = call.message.message_id
            inline_keyboard = order_formation_inline(order_id, chat_id, message_id)
            await i_message.edit_text(text=text_for_message, reply_markup=inline_keyboard)
            MESSAGES_ID_FOR_ITEMS_IN_USERS_BASKET[call.from_user.id].append(i_message.message_id)


async def remove_order(call: CallbackQuery, callback_data: dict):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î.'''

    await call.answer(text=f'{emojize(":robot:")} –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞...')
    order_id = callback_data['order_id']
    response = await req_for_remove_order(order_id=order_id)
    if response == 200:
        await call.message.edit_text(text=f'–ó–∞–∫–∞–∑ ‚Ññ {order_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.')
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—É
        for i_member in STAFF_ID:
            await BOT.send_message(chat_id=i_member, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ ‚Ññ {order_id}',
                                   reply_markup=STAFF_REACTION)
    elif response == 400:
        await call.answer(text=f'{emojize(":robot:")}–ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–µ —É–¥–∞–ª—Å—è. \n–ó–∞–∫–∞–∑ –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω.',
                          show_alert=True)


async def add_order(call: CallbackQuery, callback_data: dict, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞."""

    user = callback_data.get('user_tlg_id')
    user_tlg_name = call.from_user.username
    state_data = await state.get_data()
    client_name_data = state_data.get('your_name')
    phone_number_data = state_data.get('phone_number')
    delivery_address_data = state_data.get('delivery_address')
    sizes_for_clothes = state_data.get('your_size')

    response_basket = await get_user_basket(user_tlg_id=user)
    order_items = ''
    result_price = 0
    for i_item in response_basket:
        items_name = i_item[1]
        price = i_item[2]
        items_number_in_basket = i_item[3]

        result_price += price
        order_items = ''.join([
            order_items,
            f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {items_name}\n',
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {items_number_in_basket} —à—Ç.\n',
            f'–¶–µ–Ω–∞ –∑–∞ —à—Ç.: {price} —Ä—É–±.\n**********\n',
        ])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    user_data = {
        'user_tlg_id': user,
        'user_tlg_name': user_tlg_name if user_tlg_name else None,
        'user_name': client_name_data,
        'last_shipping_address': delivery_address_data
    }
    response_user = await post_req_for_add_new_user(user_data=user_data)
    if not response_user:
        return await call.message.answer(text=f'{emojize(":robot:")} –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ó–∞–∫–∞–∑ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω...')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ POST –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.
    order_data = {
        'user': user,
        'order_items': order_items,
        'result_orders_price': result_price,
        'pay_status': False,
        'execution_status': False,
        'delivery_address': delivery_address_data,
        'contact_telephone': phone_number_data,
        'sizes_for_clothes': sizes_for_clothes,
    }
    response = await post_req_for_add_order(order_data)
    if response == 400:
        await call.message.answer(text=f'{emojize(":robot:")} –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ó–∞–∫–∞–∑ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω...')
    else:
        order_id = response['id']

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if response.get('pay_status'):
            pay_status = '–û–ø–ª–∞—á–µ–Ω'
        else:
            pay_status = '–ù–ï –æ–ø–ª–∞—á–µ–Ω'
        if response.get('execution_status'):
            execution_status = '–ì–æ—Ç–æ–≤'
        else:
            execution_status = '–ù–ï –≥–æ—Ç–æ–≤'
        order_items = response.get('order_items').split('\n')
        result_orders_price = response.get('result_orders_price')
        text_for_message = f'<b><ins>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}' \
                           f'</ins></b>\n<b>C–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b> \n'
        other_text = f'<b>\n–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞–∫–∞–∑–∞:</b> {round(result_orders_price, 2)} —Ä—É–±.\n' \
                     f'<b>C—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:</b> {pay_status}\n' \
                     f'<b>–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {execution_status}\n\n' \
                     f'<b>–ó–∞–∫–∞–∑ –¥–ª—è:</b> <ins> {client_name_data}</ins>\n' \
                     f'<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_address_data}\n' \
                     f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {phone_number_data}\n' \
                     f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {sizes_for_clothes}'
        for i_item in order_items:
            text_for_message = ''.join([text_for_message, i_item, '\n'])
        text_for_message = ''.join([text_for_message, other_text])

        await clear_basket(user)

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –µ—ë –¥–æ–±–∞–≤–∏—Ç—å
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        inline_keyboard = order_formation_inline(order_id, chat_id, message_id)
        await call.message.edit_text(text=text_for_message, reply_markup=inline_keyboard)
        MESSAGES_ID_FOR_ITEMS_IN_USERS_BASKET[call.from_user.id] = [call.message.message_id]

        await BOT.send_message(chat_id=call.message.chat.id, text='–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.\n'
                                                                  '–ú—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –í–∞–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
                               reply_markup=INLINE_KEYBOARD_BUTTON_HEADPAGE)
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.reset_state(with_data=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—É
        for i_member in STAFF_ID:
            inline_keyboard = stuff_formation_order_complete_inline(order_id=order_id,
                                                                    chat_id=i_member, message_id=message_id)
            await BOT.send_message(chat_id=i_member, text=text_for_message, reply_markup=inline_keyboard)


def register_orders_handlers():
    DP.register_callback_query_handler(remove_order, callback_for_orders_lst.filter(flag='remove_order'))
    DP.register_callback_query_handler(add_order, callback_for_accept_order.filter(flag='yes'), state='*')
    DP.register_callback_query_handler(my_order, callback_for_headpage_inline_keyboard.filter(flag='my_order'))
